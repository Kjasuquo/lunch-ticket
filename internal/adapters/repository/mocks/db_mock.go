// Code generated by MockGen. DO NOT EDIT.
// Source: internal/ports/repository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"
	time "time"

	models "github.com/decadevs/lunch-api/internal/core/models"
	gomock "github.com/golang/mock/gomock"
)

// MockUserRepository is a mock of UserRepository interface.
type MockUserRepository struct {
	ctrl     *gomock.Controller
	recorder *MockUserRepositoryMockRecorder
}

// MockUserRepositoryMockRecorder is the mock recorder for MockUserRepository.
type MockUserRepositoryMockRecorder struct {
	mock *MockUserRepository
}

// NewMockUserRepository creates a new mock instance.
func NewMockUserRepository(ctrl *gomock.Controller) *MockUserRepository {
	mock := &MockUserRepository{ctrl: ctrl}
	mock.recorder = &MockUserRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserRepository) EXPECT() *MockUserRepositoryMockRecorder {
	return m.recorder
}

// AddTokenToBlacklist mocks base method.
func (m *MockUserRepository) AddTokenToBlacklist(email, token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTokenToBlacklist", email, token)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTokenToBlacklist indicates an expected call of AddTokenToBlacklist.
func (mr *MockUserRepositoryMockRecorder) AddTokenToBlacklist(email, token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTokenToBlacklist", reflect.TypeOf((*MockUserRepository)(nil).AddTokenToBlacklist), email, token)
}

// CreateAdmin mocks base method.
func (m *MockUserRepository) CreateAdmin(user *models.Admin) (*models.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAdmin", user)
	ret0, _ := ret[0].(*models.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAdmin indicates an expected call of CreateAdmin.
func (mr *MockUserRepositoryMockRecorder) CreateAdmin(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAdmin", reflect.TypeOf((*MockUserRepository)(nil).CreateAdmin), user)
}

// CreateFoodBenefactor mocks base method.
func (m *MockUserRepository) CreateFoodBenefactor(user *models.FoodBeneficiary) (*models.FoodBeneficiary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFoodBenefactor", user)
	ret0, _ := ret[0].(*models.FoodBeneficiary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateFoodBenefactor indicates an expected call of CreateFoodBenefactor.
func (mr *MockUserRepositoryMockRecorder) CreateFoodBenefactor(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFoodBenefactor", reflect.TypeOf((*MockUserRepository)(nil).CreateFoodBenefactor), user)
}

// CreateFoodTimetable mocks base method.
func (m *MockUserRepository) CreateFoodTimetable(food models.Food) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateFoodTimetable", food)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateFoodTimetable indicates an expected call of CreateFoodTimetable.
func (mr *MockUserRepositoryMockRecorder) CreateFoodTimetable(food interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateFoodTimetable", reflect.TypeOf((*MockUserRepository)(nil).CreateFoodTimetable), food)
}

// CreateKitchenStaff mocks base method.
func (m *MockUserRepository) CreateKitchenStaff(user *models.KitchenStaff) (*models.KitchenStaff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateKitchenStaff", user)
	ret0, _ := ret[0].(*models.KitchenStaff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateKitchenStaff indicates an expected call of CreateKitchenStaff.
func (mr *MockUserRepositoryMockRecorder) CreateKitchenStaff(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateKitchenStaff", reflect.TypeOf((*MockUserRepository)(nil).CreateKitchenStaff), user)
}

// FindAdminByEmail mocks base method.
func (m *MockUserRepository) FindAdminByEmail(email string) (*models.Admin, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindAdminByEmail", email)
	ret0, _ := ret[0].(*models.Admin)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindAdminByEmail indicates an expected call of FindAdminByEmail.
func (mr *MockUserRepositoryMockRecorder) FindAdminByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindAdminByEmail", reflect.TypeOf((*MockUserRepository)(nil).FindAdminByEmail), email)
}

// FindBrunchByDate mocks base method.
func (m *MockUserRepository) FindBrunchByDate(year int, month time.Month, day int) (*models.Food, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindBrunchByDate", year, month, day)
	ret0, _ := ret[0].(*models.Food)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindBrunchByDate indicates an expected call of FindBrunchByDate.
func (mr *MockUserRepositoryMockRecorder) FindBrunchByDate(year, month, day interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindBrunchByDate", reflect.TypeOf((*MockUserRepository)(nil).FindBrunchByDate), year, month, day)
}

// FindDinnerByDate mocks base method.
func (m *MockUserRepository) FindDinnerByDate(year int, month time.Month, day int) (*models.Food, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindDinnerByDate", year, month, day)
	ret0, _ := ret[0].(*models.Food)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindDinnerByDate indicates an expected call of FindDinnerByDate.
func (mr *MockUserRepositoryMockRecorder) FindDinnerByDate(year, month, day interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindDinnerByDate", reflect.TypeOf((*MockUserRepository)(nil).FindDinnerByDate), year, month, day)
}

// FindFoodBenefactorByEmail mocks base method.
func (m *MockUserRepository) FindFoodBenefactorByEmail(email string) (*models.FoodBeneficiary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFoodBenefactorByEmail", email)
	ret0, _ := ret[0].(*models.FoodBeneficiary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFoodBenefactorByEmail indicates an expected call of FindFoodBenefactorByEmail.
func (mr *MockUserRepositoryMockRecorder) FindFoodBenefactorByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFoodBenefactorByEmail", reflect.TypeOf((*MockUserRepository)(nil).FindFoodBenefactorByEmail), email)
}

// FindFoodBenefactorByFullName mocks base method.
func (m *MockUserRepository) FindFoodBenefactorByFullName(fullname string) (*models.FoodBeneficiary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFoodBenefactorByFullName", fullname)
	ret0, _ := ret[0].(*models.FoodBeneficiary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFoodBenefactorByFullName indicates an expected call of FindFoodBenefactorByFullName.
func (mr *MockUserRepositoryMockRecorder) FindFoodBenefactorByFullName(fullname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFoodBenefactorByFullName", reflect.TypeOf((*MockUserRepository)(nil).FindFoodBenefactorByFullName), fullname)
}

// FindFoodBenefactorByLocation mocks base method.
func (m *MockUserRepository) FindFoodBenefactorByLocation(location string) (*models.FoodBeneficiary, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindFoodBenefactorByLocation", location)
	ret0, _ := ret[0].(*models.FoodBeneficiary)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindFoodBenefactorByLocation indicates an expected call of FindFoodBenefactorByLocation.
func (mr *MockUserRepositoryMockRecorder) FindFoodBenefactorByLocation(location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindFoodBenefactorByLocation", reflect.TypeOf((*MockUserRepository)(nil).FindFoodBenefactorByLocation), location)
}

// FindKitchenStaffByEmail mocks base method.
func (m *MockUserRepository) FindKitchenStaffByEmail(email string) (*models.KitchenStaff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindKitchenStaffByEmail", email)
	ret0, _ := ret[0].(*models.KitchenStaff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindKitchenStaffByEmail indicates an expected call of FindKitchenStaffByEmail.
func (mr *MockUserRepositoryMockRecorder) FindKitchenStaffByEmail(email interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindKitchenStaffByEmail", reflect.TypeOf((*MockUserRepository)(nil).FindKitchenStaffByEmail), email)
}

// FindKitchenStaffByFullName mocks base method.
func (m *MockUserRepository) FindKitchenStaffByFullName(fullname string) (*models.KitchenStaff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindKitchenStaffByFullName", fullname)
	ret0, _ := ret[0].(*models.KitchenStaff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindKitchenStaffByFullName indicates an expected call of FindKitchenStaffByFullName.
func (mr *MockUserRepositoryMockRecorder) FindKitchenStaffByFullName(fullname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindKitchenStaffByFullName", reflect.TypeOf((*MockUserRepository)(nil).FindKitchenStaffByFullName), fullname)
}

// FindKitchenStaffByLocation mocks base method.
func (m *MockUserRepository) FindKitchenStaffByLocation(location string) (*models.KitchenStaff, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindKitchenStaffByLocation", location)
	ret0, _ := ret[0].(*models.KitchenStaff)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindKitchenStaffByLocation indicates an expected call of FindKitchenStaffByLocation.
func (mr *MockUserRepositoryMockRecorder) FindKitchenStaffByLocation(location interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindKitchenStaffByLocation", reflect.TypeOf((*MockUserRepository)(nil).FindKitchenStaffByLocation), location)
}

// TokenInBlacklist mocks base method.
func (m *MockUserRepository) TokenInBlacklist(token *string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TokenInBlacklist", token)
	ret0, _ := ret[0].(bool)
	return ret0
}

// TokenInBlacklist indicates an expected call of TokenInBlacklist.
func (mr *MockUserRepositoryMockRecorder) TokenInBlacklist(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TokenInBlacklist", reflect.TypeOf((*MockUserRepository)(nil).TokenInBlacklist), token)
}
